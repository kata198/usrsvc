#!/usr/bin/env python
'''
    Copyright (c) 2016 Tim Savannah All Rights Reserved.
    This software is licensed under the terms of the GPLv3, with additions/modifications.
    This may change at my discretion, retroactively, and without notice.

    You should have received a copy of this with the source distribution as a file titled, LICENSE,
    and additions in a file titled LICENSE.additions. 

    In any situation that LICENSE.additions 

    The most current license can be found at:
    https://github.com/kata198/usrsvc/LICENSE

    and additions/modifications at:
    https://github.com/kata198/usrsvc/LICENSE.additions

    This location may need to be changed at some point in the future, in which case
    you are may email Tim Savannah <kata198 at gmail dot com>, or find them on the
    current website intended for distribution of usrsvc.

    usrsvc is a user process manager
'''


import os
import sys
import traceback

from NamedAtomicLock import NamedAtomicLock

from usrsvcmod.config import config as usrsvcconfig
from usrsvcmod.Program import Program
from usrsvcmod.ProgramActions import getRunningProgram
from usrsvcmod.logging import logMsg, logErr


def doAction(args):
    action = args[0]
    programName = args[1]
    if programName == 'all':
        ret = 0
        for singleProgramName in config.getProgramConfigs().keys():
            try:
                ret2 = doAction([action, singleProgramName])
            except Exception as e:
                logErr('Exception (%s) trying to %s %s\n' %(str(e.__class__.__name__), action, singleProgramName))
                traceback.print_exc()
                ret2 = 254
            if ret2 != 0:
                ret = ret2
        return ret
    # TODO: Configurable lock dir?
    lock = NamedAtomicLock('.lock_usrsvc' + programName, maxLockAge=30)
    if not lock.acquire(31):
        logErr('Cannot acquire lock for %s. Is something else looping trying to access it? Try the command again.\n' %(programName,))
        return 3
    ret = _doAction(args)
    lock.release()
    return ret

# TODO: Standardize return codes and create constants
def _doAction(args):
    action = args[0]
    programName = args[1]

    try:
        programConfig = config.getProgramConfig(programName)
    except KeyError:
        logErr('No such program: %s\n' %(programName,))
        return 2

    if programConfig.enabled is False and action != 'status':
        logErr('Program %s is currently disabled in config. Only the "status" action is supported on disabled programs.\n' %(programName,))

    if action == 'start':
        prog = None
        try:
            prog = Program.createFromPidFile(programConfig.pidfile)
        except:
            pass

        prog = getRunningProgram(programConfig)
        if prog is not None:
            logMsg('Program %s is already running:\n\n%s\n' %(programName, prog.__dict__))
            return 0

        prog = Program(programConfig.pidfile)
        success = prog.startProgram(programConfig)
        if success:
            logMsg('Started %s:\n\n%s\n' %(programName, prog.__dict__))
            return 0
        else:
            logErr('Failed to start %s!\n' %(programName,))
            return 1

    elif action == 'stop':
        
        prog = getRunningProgram(programConfig)
        if prog:
            prog.stopProgram(programConfig)
        return 0
    elif action == 'restart':
        _doAction(['stop'] + args[1:])
        return _doAction(['start'] + args[1:])
    elif action == 'status':
        prog = getRunningProgram(programConfig)
        if prog:
            logMsg('%s is running:\n\n%s\n' %(programName, str(prog.__dict__)))
            return 0
        else:
            logErr('%s is NOT running\n' %(programName,))
            return 1
    else:
        logErr('Unknown action: %s\n' %(action,))
        return 2
        


def printUsage():
    sys.stderr.write('Usage: usrsvc [start/stop/restart/status] [program name]\n  Performs the requested action on the given program name.\n\nUses the config file found at $HOME/usrsvc.cfg (%s)\n' %(os.environ['HOME'] + '/usrsvc.cfg'))


if __name__ == '__main__':
    if len(sys.argv) != 3 or '--help' in sys.argv:
        printUsage()
        sys.exit(1)

    config = usrsvcconfig(os.environ['HOME'] + '/usrsvc.cfg')
    config.parse()

    sys.exit(doAction(sys.argv[1:]))

